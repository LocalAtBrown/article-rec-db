[tool.poetry]
description = "Database models and imgrations for the Local News Lab's article recommendation system"
name = "article-rec-db"
version = "0.0.1"
authors = ["Duy Nguyen <hello.duyknguyen@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/LocalAtBrown/article-rec-db/"
repository = "https://github.com/LocalAtBrown/article-rec-db/"
documentation = "https://github.com/LocalAtBrown/article-rec-db/"
packages = [{ include = "article_rec_db" }]

[tool.poetry.dependencies]
python = "^3.11"
boto3 = "^1.28.76"
boto3-stubs = { version = "^1.28.76", extras = ["ssm"] }
sqlmodel = "^0.0.11"
pydantic = "^1.10.13"
sqlalchemy = "^1.4.36"
psycopg2 = "^2.9.9"

[tool.poetry.group.dev.dependencies]
alembic = "^1.12.1"
mypy = "^1.6.1"
pre-commit = "^3.5.0"
pytest = "^7.4.3"
pytest-order = "^1.1.0"
poethepoet = "^0.24.2"

[tool.poe.tasks.start-container]
help = "Start a local postgres container in the background"
shell = "docker run -d --rm --name postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_HOST_AUTH_METHOD=trust -p 127.0.0.1:5432:5432/tcp postgres"

[tool.poe.tasks.stop-container]
help = "Stop the local postgres container running in the background"
shell = "docker stop postgres"

[tool.poe.tasks._wait-container]
help = "Wait for the local postgres container to be ready, since docker run returns before the container is actually ready"
env = { SLEEP_SECONDS = "2" }
shell = """
until timeout 3 psql -h 127.0.0.1 -U postgres -c "select 1" -d postgres 2>&0>/dev/null
do
  printf "Waiting %s seconds for PostgreSQL to come up: %s@%s/%s...\n" $SLEEP_SECONDS postgres 127.0.0.1 postgres
  sleep $SLEEP_SECONDS;
done
"""

[tool.poe.tasks._pytest]
cmd = "pytest tests"

[tool.poe.tasks.test]
help = "Run the test suite"
sequence = ["start-container", "_wait-container", "_pytest", "stop-container"]
ignore_fail = "return_non_zero"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
include = '\.pyi?$'
line-length = 122
exclude = '''
(
  /(                        # exclude a few common directories in the
    \.git                   # root of the project
    | \.pytest_cache
    | python-venv
    | \.venv
    | build
    | dist
    | \.tox
  ))
'''

[tool.isort]
profile = "black"

[tool.mypy]
# use the strict option since this a new project
strict = "True"
implicit_reexport = "True"
files = "."
exclude = ['\.venv', 'tests', 'alembic']
