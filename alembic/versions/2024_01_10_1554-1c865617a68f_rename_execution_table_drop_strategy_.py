"""rename execution table & drop strategy enum

Revision ID: 1c865617a68f
Revises: e8ee289b5631 # noqa: W291
Create Date: 2024-01-10 15:54:07.274283

"""
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "1c865617a68f"
down_revision = "e8ee289b5631"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "DEFAULT_AKA_NO_SOURCE",
        "SOURCE_TARGET_INTERCHANGEABLE",
        "SOURCE_TARGET_NOT_INTERCHANGEABLE",
        name="recommendationtype",
    ).create(op.get_bind())
    op.create_table(
        "recommender",
        sa.Column("db_created_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("strategy", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "recommendation_type",
            postgresql.ENUM(
                "DEFAULT_AKA_NO_SOURCE",
                "SOURCE_TARGET_INTERCHANGEABLE",
                "SOURCE_TARGET_NOT_INTERCHANGEABLE",
                name="recommendationtype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("embedding", sa.Column("recommender_id", sqlmodel.sql.sqltypes.GUID(), nullable=False))
    op.drop_constraint("embedding_execution_id_fkey", "embedding", type_="foreignkey")
    op.create_foreign_key("embedding_recommender_id_fkey", "embedding", "recommender", ["recommender_id"], ["id"])
    op.drop_column("embedding", "execution_id")
    op.add_column("recommendation", sa.Column("recommender_id", sqlmodel.sql.sqltypes.GUID(), nullable=False))
    op.drop_constraint("recommendation_execution_target_unique", "recommendation", type_="unique")
    op.create_unique_constraint(
        "recommendation_recommender_target_unique", "recommendation", ["recommender_id", "target_article_id"]
    )
    op.drop_constraint("recommendation_execution_id_fkey", "recommendation", type_="foreignkey")
    op.create_foreign_key(
        "recommendation_recommender_id_fkey", "recommendation", "recommender", ["recommender_id"], ["id"]
    )
    op.drop_column("recommendation", "execution_id")
    op.drop_table("execution")
    sa.Enum("POPULARITY", "COLLABORATIVE_FILTERING_ITEM_BASED", "SEMANTIC_SIMILARITY", name="strategytype").drop(
        op.get_bind()
    )
    sa.Enum(
        "DEFAULT_AKA_NO_SOURCE",
        "SOURCE_TARGET_INTERCHANGEABLE",
        "SOURCE_TARGET_NOT_INTERCHANGEABLE",
        name="strategyrecommendationtype",
    ).drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "DEFAULT_AKA_NO_SOURCE",
        "SOURCE_TARGET_INTERCHANGEABLE",
        "SOURCE_TARGET_NOT_INTERCHANGEABLE",
        name="strategyrecommendationtype",
    ).create(op.get_bind())
    sa.Enum("POPULARITY", "COLLABORATIVE_FILTERING_ITEM_BASED", "SEMANTIC_SIMILARITY", name="strategytype").create(
        op.get_bind()
    )
    op.create_table(
        "execution",
        sa.Column("db_created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "strategy",
            postgresql.ENUM(
                "POPULARITY",
                "COLLABORATIVE_FILTERING_ITEM_BASED",
                "SEMANTIC_SIMILARITY",
                name="strategytype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "strategy_recommendation_type",
            postgresql.ENUM(
                "DEFAULT_AKA_NO_SOURCE",
                "SOURCE_TARGET_INTERCHANGEABLE",
                "SOURCE_TARGET_NOT_INTERCHANGEABLE",
                name="strategyrecommendationtype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="execution_pkey"),
    )
    op.add_column("recommendation", sa.Column("execution_id", sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint("recommendation_recommender_id_fkey", "recommendation", type_="foreignkey")
    op.create_foreign_key("recommendation_execution_id_fkey", "recommendation", "execution", ["execution_id"], ["id"])
    op.drop_constraint("recommendation_recommender_target_unique", "recommendation", type_="unique")
    op.create_unique_constraint(
        "recommendation_execution_target_unique", "recommendation", ["execution_id", "target_article_id"]
    )
    op.drop_column("recommendation", "recommender_id")
    op.add_column("embedding", sa.Column("execution_id", sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint("embedding_recommender_id_fkey", "embedding", type_="foreignkey")
    op.create_foreign_key("embedding_execution_id_fkey", "embedding", "execution", ["execution_id"], ["id"])
    op.drop_column("embedding", "recommender_id")
    op.drop_table("recommender")
    sa.Enum(
        "DEFAULT_AKA_NO_SOURCE",
        "SOURCE_TARGET_INTERCHANGEABLE",
        "SOURCE_TARGET_NOT_INTERCHANGEABLE",
        name="recommendationtype",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
